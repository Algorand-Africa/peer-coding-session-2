{
  "version": 3,
  "sources": [
    "/workspaces/peer-coding-session-2/asset-market/projects/asset-market/smart_contracts/asset_market/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;AAqEG;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAlBA;;AAAA;AAAA;AAAA;;AAAA;AAnDH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAmDG;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAxCH;;;AAAA;AAwCG;;;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AApBH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAoBG;;;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAVH;;;AAAA;AAUG;;;AAAA;;AAAD;;;AAEE;;AAAA;AAPF;AASE;;AAAA;;AAMF;;;AAEa;;AAAkB;;AAAtB;AAAP;AACc;;AAAA;;AAAU;AAAjB;AAAP;AACc;;AAAA;;AAAoB;;AAA3B;AAAP;AAEiB;AAGL;;;AADH;;;;;AADI;;;;;;;;;AADI;;;;AAAA;;;AAAA;;;AAxBnB;AA8BE;;AAAA;AAEA;AAMF;;;AAEE;;AAAA;AACW;;AAAkB;;AAAtB;AAAP;AAtCF;AAwCE;;AAAA;;AAMF;;;AAjDA;AAAA;AAmD6B;AAAA;;AAA3B;AAhDF;AAAA;AAAA;AAAA;AAiDS;;AAAA;AAAoD;;AAAA;;AAApD;AAAP;AACW;;AArDb;AAAA;AAAA;AAAA;AAqDS;;AAAA;;AAAP;AACkB;;AAAA;;AAAoB;;AAA/B;AAAP;AACkB;;AAAA;;AAAe;;AAA1B;AAAP;AAEA;AAzDF;AAAA;AAAA;AAAA;AA4DuB;;;;;;;;;;AAHrB;;;AAAA;;;AAAA;;AAYW;;AAAkB;;AAAtB;AAAP;AArEF;AAAA;AAuE0B;AAAA;;AAAxB;;;AACa;;AAxEf;AAAA;AAAA;AAAA;AAwEW;;AAAA;;AAAP;AAEqE;;AA1EzE;AAAA;AAAA;AAAA;AA0EyB;;AAAA;AAErB;AA5EJ;AAAA;AAAA;AAAA;AA+E4B;;;;;;;;AAHxB;;;AAAA;;;AAAA;AAOiC;;AAA0B;;AAAA;AAAU;AAA3C;AAE5B;AACmB;;;;;;AADnB;;;AAAA;;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 200000 4"
    },
    "9": {
      "op": "bytecblock \"listingAssetId\" \"unitPrice\""
    },
    "36": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "38": {
      "op": "bz main_after_if_else@11",
      "stack_out": []
    },
    "41": {
      "op": "pushbytess 0x973b616f 0x695f0eaa 0x830ff424 0x91ffd219 0x2487c32c // method \"createApplication(uint64)void\", method \"createAsset(pay)uint64\", method \"updatePrice(uint64)void\", method \"purchaseAsset(pay,uint64)void\", method \"deleteApplication()void\"",
      "defined_out": [
        "Method(createApplication(uint64)void)",
        "Method(createAsset(pay)uint64)",
        "Method(deleteApplication()void)",
        "Method(purchaseAsset(pay,uint64)void)",
        "Method(updatePrice(uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(uint64)void)",
        "Method(createAsset(pay)uint64)",
        "Method(updatePrice(uint64)void)",
        "Method(purchaseAsset(pay,uint64)void)",
        "Method(deleteApplication()void)"
      ]
    },
    "68": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(createApplication(uint64)void)",
        "Method(createAsset(pay)uint64)",
        "Method(deleteApplication()void)",
        "Method(purchaseAsset(pay,uint64)void)",
        "Method(updatePrice(uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication(uint64)void)",
        "Method(createAsset(pay)uint64)",
        "Method(updatePrice(uint64)void)",
        "Method(purchaseAsset(pay,uint64)void)",
        "Method(deleteApplication()void)",
        "tmp%2#0"
      ]
    },
    "71": {
      "op": "match main_createApplication_route@3 main_createAsset_route@4 main_updatePrice_route@5 main_purchaseAsset_route@6 main_deleteApplication_route@7",
      "stack_out": []
    },
    "83": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "84": {
      "op": "return",
      "stack_out": []
    },
    "85": {
      "block": "main_deleteApplication_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "87": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "DeleteApplication"
      ]
    },
    "89": {
      "op": "==",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "90": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "91": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "93": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "94": {
      "callsub": "smart_contracts/asset_market/contract.algo.ts::AssetMarket.deleteApplication",
      "op": "callsub deleteApplication"
    },
    "97": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "98": {
      "op": "return",
      "stack_out": []
    },
    "99": {
      "block": "main_purchaseAsset_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "101": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "102": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "103": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "105": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "106": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "108": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "1"
      ]
    },
    "109": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "110": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "111": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "113": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "114": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "115": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "116": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "119": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%1#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "tmp%24#0"
      ]
    },
    "120": {
      "callsub": "smart_contracts/asset_market/contract.algo.ts::AssetMarket.purchaseAsset",
      "op": "callsub purchaseAsset",
      "stack_out": []
    },
    "123": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "124": {
      "op": "return",
      "stack_out": []
    },
    "125": {
      "block": "main_updatePrice_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "127": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "128": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "129": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "131": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "132": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "135": {
      "op": "btoi",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "136": {
      "callsub": "smart_contracts/asset_market/contract.algo.ts::AssetMarket.updatePrice",
      "op": "callsub updatePrice",
      "stack_out": []
    },
    "139": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "140": {
      "op": "return",
      "stack_out": []
    },
    "141": {
      "block": "main_createAsset_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "143": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "144": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "145": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "147": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "148": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "150": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "1"
      ]
    },
    "151": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "152": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "153": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "155": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "156": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "157": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "158": {
      "callsub": "smart_contracts/asset_market/contract.algo.ts::AssetMarket.createAsset",
      "op": "callsub createAsset",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "161": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "162": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "168": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "169": {
      "op": "concat",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "170": {
      "op": "log",
      "stack_out": []
    },
    "171": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "172": {
      "op": "return",
      "stack_out": []
    },
    "173": {
      "block": "main_createApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "175": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "176": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "177": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "179": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "180": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "181": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "184": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "185": {
      "callsub": "smart_contracts/asset_market/contract.algo.ts::AssetMarket.createApplication",
      "op": "callsub createApplication",
      "stack_out": []
    },
    "188": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "189": {
      "op": "return",
      "stack_out": []
    },
    "190": {
      "subroutine": "smart_contracts/asset_market/contract.algo.ts::AssetMarket.createApplication",
      "params": {
        "unitPrice#0": "uint64"
      },
      "block": "createApplication",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "193": {
      "op": "frame_dig -1",
      "defined_out": [
        "unitPrice#0 (copy)"
      ],
      "stack_out": [
        "unitPrice#0 (copy)"
      ]
    },
    "195": {
      "error": "Unit price must be greater than 0",
      "op": "assert // Unit price must be greater than 0",
      "stack_out": []
    },
    "196": {
      "op": "bytec_1 // \"unitPrice\"",
      "defined_out": [
        "\"unitPrice\""
      ],
      "stack_out": [
        "\"unitPrice\""
      ]
    },
    "197": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"unitPrice\"",
        "unitPrice#0 (copy)"
      ]
    },
    "199": {
      "op": "app_global_put",
      "stack_out": []
    },
    "200": {
      "retsub": true,
      "op": "retsub"
    },
    "201": {
      "subroutine": "smart_contracts/asset_market/contract.algo.ts::AssetMarket.createAsset",
      "params": {
        "mbrTxn#0": "uint64"
      },
      "block": "createAsset",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "204": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "206": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "208": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "209": {
      "op": "assert",
      "stack_out": []
    },
    "210": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "212": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "214": {
      "op": "intc_2 // 200000",
      "defined_out": [
        "200000",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "200000"
      ]
    },
    "215": {
      "op": ">=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "216": {
      "error": "Minimum balance must be at least 0.2 algos",
      "op": "assert // Minimum balance must be at least 0.2 algos",
      "stack_out": []
    },
    "217": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "219": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "221": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "223": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "224": {
      "op": "assert",
      "stack_out": []
    },
    "225": {
      "op": "itxn_begin"
    },
    "226": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "227": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": []
    },
    "229": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "232": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": []
    },
    "234": {
      "op": "pushbytes \"NAIJA\"",
      "defined_out": [
        "\"NAIJA\""
      ],
      "stack_out": [
        "\"NAIJA\""
      ]
    },
    "241": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "243": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3"
      ],
      "stack_out": [
        "3"
      ]
    },
    "245": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "247": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "248": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "250": {
      "op": "itxn_submit"
    },
    "251": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "response.CreatedAssetID#0"
      ],
      "stack_out": [
        "response.CreatedAssetID#0"
      ]
    },
    "253": {
      "op": "bytec_0 // \"listingAssetId\"",
      "defined_out": [
        "\"listingAssetId\"",
        "response.CreatedAssetID#0"
      ],
      "stack_out": [
        "response.CreatedAssetID#0",
        "\"listingAssetId\""
      ]
    },
    "254": {
      "op": "dig 1",
      "defined_out": [
        "\"listingAssetId\"",
        "response.CreatedAssetID#0",
        "response.CreatedAssetID#0 (copy)"
      ],
      "stack_out": [
        "response.CreatedAssetID#0",
        "\"listingAssetId\"",
        "response.CreatedAssetID#0 (copy)"
      ]
    },
    "256": {
      "op": "app_global_put",
      "stack_out": [
        "response.CreatedAssetID#0"
      ]
    },
    "257": {
      "retsub": true,
      "op": "retsub"
    },
    "258": {
      "subroutine": "smart_contracts/asset_market/contract.algo.ts::AssetMarket.updatePrice",
      "params": {
        "newPrice#0": "uint64"
      },
      "block": "updatePrice",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "261": {
      "op": "frame_dig -1",
      "defined_out": [
        "newPrice#0 (copy)"
      ],
      "stack_out": [
        "newPrice#0 (copy)"
      ]
    },
    "263": {
      "error": "Unit price must be greater than 0",
      "op": "assert // Unit price must be greater than 0",
      "stack_out": []
    },
    "264": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "266": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "268": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "269": {
      "op": "assert",
      "stack_out": []
    },
    "270": {
      "op": "bytec_1 // \"unitPrice\"",
      "defined_out": [
        "\"unitPrice\""
      ],
      "stack_out": [
        "\"unitPrice\""
      ]
    },
    "271": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"unitPrice\"",
        "newPrice#0 (copy)"
      ]
    },
    "273": {
      "op": "app_global_put",
      "stack_out": []
    },
    "274": {
      "retsub": true,
      "op": "retsub"
    },
    "275": {
      "subroutine": "smart_contracts/asset_market/contract.algo.ts::AssetMarket.purchaseAsset",
      "params": {
        "paymentTxn#0": "uint64",
        "numberOfUnits#0": "uint64"
      },
      "block": "purchaseAsset",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "278": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "279": {
      "op": "bytec_0 // \"listingAssetId\"",
      "defined_out": [
        "\"listingAssetId\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"listingAssetId\""
      ]
    },
    "280": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "281": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "283": {
      "op": "assert",
      "stack_out": []
    },
    "284": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "285": {
      "op": "bytec_1 // \"unitPrice\"",
      "defined_out": [
        "\"unitPrice\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"unitPrice\""
      ]
    },
    "286": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "287": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "288": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%1#0",
        "numberOfUnits#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "numberOfUnits#0 (copy)"
      ]
    },
    "290": {
      "op": "*",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "291": {
      "op": "frame_dig -2",
      "defined_out": [
        "paymentTxn#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "paymentTxn#0 (copy)"
      ]
    },
    "293": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "295": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "296": {
      "op": "assert",
      "stack_out": []
    },
    "297": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "299": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "300": {
      "op": "bytec_0 // \"listingAssetId\"",
      "stack_out": [
        "tmp%3#0",
        "0",
        "\"listingAssetId\""
      ]
    },
    "301": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "302": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%2#0"
      ]
    },
    "303": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "305": {
      "op": "bury 1",
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "307": {
      "op": "assert",
      "stack_out": []
    },
    "308": {
      "op": "frame_dig -2",
      "stack_out": [
        "paymentTxn#0 (copy)"
      ]
    },
    "310": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "312": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "314": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "315": {
      "op": "assert",
      "stack_out": []
    },
    "316": {
      "op": "frame_dig -2",
      "stack_out": [
        "paymentTxn#0 (copy)"
      ]
    },
    "318": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "320": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "322": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "323": {
      "op": "assert",
      "stack_out": []
    },
    "324": {
      "op": "itxn_begin"
    },
    "325": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "326": {
      "op": "bytec_0 // \"listingAssetId\"",
      "stack_out": [
        "0",
        "\"listingAssetId\""
      ]
    },
    "327": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "328": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "329": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "331": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "333": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%3#0",
        "numberOfUnits#0 (copy)"
      ]
    },
    "335": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "337": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "339": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "340": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "342": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "343": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "345": {
      "op": "itxn_submit"
    },
    "346": {
      "retsub": true,
      "op": "retsub"
    },
    "347": {
      "subroutine": "smart_contracts/asset_market/contract.algo.ts::AssetMarket.deleteApplication",
      "params": {},
      "block": "deleteApplication",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "349": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "351": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "352": {
      "op": "assert",
      "stack_out": []
    },
    "353": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "354": {
      "op": "bytec_0 // \"listingAssetId\"",
      "defined_out": [
        "\"listingAssetId\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"listingAssetId\""
      ]
    },
    "355": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "356": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "358": {
      "op": "bz deleteApplication_after_if_else@3",
      "stack_out": []
    },
    "361": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "363": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "364": {
      "op": "bytec_0 // \"listingAssetId\"",
      "stack_out": [
        "tmp%3#0",
        "0",
        "\"listingAssetId\""
      ]
    },
    "365": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "366": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%1#0"
      ]
    },
    "367": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "369": {
      "op": "bury 1",
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "371": {
      "op": "assert",
      "stack_out": []
    },
    "372": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "374": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "375": {
      "op": "bytec_0 // \"listingAssetId\"",
      "stack_out": [
        "tmp%6#0",
        "0",
        "\"listingAssetId\""
      ]
    },
    "376": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "377": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%6#0",
        "maybe_value%2#0"
      ]
    },
    "378": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "assetBalance#0",
        "check%0#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "check%0#0"
      ]
    },
    "380": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "assetBalance#0"
      ]
    },
    "381": {
      "op": "itxn_begin"
    },
    "382": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "0"
      ]
    },
    "383": {
      "op": "bytec_0 // \"listingAssetId\"",
      "stack_out": [
        "assetBalance#0",
        "0",
        "\"listingAssetId\""
      ]
    },
    "384": {
      "op": "app_global_get_ex",
      "defined_out": [
        "assetBalance#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "385": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "maybe_value%3#0"
      ]
    },
    "386": {
      "op": "global CreatorAddress",
      "defined_out": [
        "assetBalance#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "maybe_value%3#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "388": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "assetBalance#0",
        "maybe_value%3#0"
      ]
    },
    "390": {
      "op": "itxn_field XferAsset"
    },
    "392": {
      "op": "itxn_field AssetAmount",
      "stack_out": []
    },
    "394": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "395": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "397": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "398": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "400": {
      "op": "itxn_submit"
    },
    "401": {
      "block": "deleteApplication_after_if_else@3",
      "stack_in": [],
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "403": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%1#0",
        "value%1#0"
      ],
      "stack_out": [
        "value%1#0",
        "check%1#0"
      ]
    },
    "405": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "value%1#0"
      ]
    },
    "406": {
      "op": "intc_2 // 200000",
      "defined_out": [
        "200000",
        "value%1#0"
      ],
      "stack_out": [
        "value%1#0",
        "200000"
      ]
    },
    "407": {
      "op": "-",
      "defined_out": [
        "algoBalance#0"
      ],
      "stack_out": [
        "algoBalance#0"
      ]
    },
    "408": {
      "op": "itxn_begin"
    },
    "409": {
      "op": "global CreatorAddress",
      "defined_out": [
        "algoBalance#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ]
    },
    "411": {
      "op": "itxn_field Receiver"
    },
    "413": {
      "op": "itxn_field Amount",
      "stack_out": []
    },
    "415": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "416": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "418": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "419": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "421": {
      "op": "itxn_submit"
    },
    "422": {
      "retsub": true,
      "op": "retsub"
    }
  }
}