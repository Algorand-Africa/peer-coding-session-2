/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"AssetMarket","structs":{},"methods":[{"name":"createApplication","args":[{"type":"uint64","name":"unitPrice"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"desc":"Create Application method (set price while creating)","events":[],"recommendations":{}},{"name":"createAsset","args":[{"type":"pay","name":"mbrTxn"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create Asset","events":[],"recommendations":{}},{"name":"updatePrice","args":[{"type":"uint64","name":"newPrice"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update price - newPrice","events":[],"recommendations":{}},{"name":"purchaseAsset","args":[{"type":"pay","name":"paymentTxn"},{"type":"uint64","name":"numberOfUnits"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"purchase asset - numberOfUnits","events":[],"recommendations":{}},{"name":"deleteApplication","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["DeleteApplication"]},"readonly":false,"desc":"Delete application method","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":2,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"listingAssetId":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGlzdGluZ0Fzc2V0SWQ="},"unitPrice":{"keyType":"AVMString","valueType":"AVMUint64","key":"dW5pdFByaWNl"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[216],"errorMessage":"Minimum balance must be at least 0.2 algos"},{"pc":[90],"errorMessage":"OnCompletion is not DeleteApplication"},{"pc":[102,128,144,176],"errorMessage":"OnCompletion is not NoOp"},{"pc":[195,263],"errorMessage":"Unit price must be greater than 0"},{"pc":[405],"errorMessage":"account funded"},{"pc":[380],"errorMessage":"account opted into asset"},{"pc":[180],"errorMessage":"can only call when creating"},{"pc":[93,105,131,147],"errorMessage":"can only call when not creating"},{"pc":[287,302,328,366,377,385],"errorMessage":"check GlobalState exists"},{"pc":[115,157],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAAHAmgwEJgIObGlzdGluZ0Fzc2V0SWQJdW5pdFByaWNlMRtBACqCBQSXO2FvBGlfDqoEgw/0JASR/9IZBCSHwyw2GgCOBQBaADoAKgAQAAIiQzEZgQUSRDEYRIgA+iNDMRkURDEYRDEWIwlJOBAjEkQ2GgEXiACYI0MxGRREMRhENhoBF4gAdyNDMRkURDEYRDEWIwlJOBAjEkSIACgWgAQVH3x1TFCwI0MxGRREMRgURDYaAReIAAIjQ4oBAIv/RCmL/2eJigEBMQAyCRJEi/84CCQPRIv/OAcyChJEsSKyI4HoB7IigAVOQUlKQbImgQOyECKyAbO0PChLAWeJigEAi/9EMQAyCRJEKYv/Z4mKAgAiKGVFAUQiKWVEi/8Li/44CBJEMQAiKGVEcABFAUSL/jgHMgoSRIv+OAAxABJEsSIoZUQxALIUi/+yErIRJbIQIrIBs4kxADIJEkQiKGVFAUEAKDEAIihlRHAARQFEMgoiKGVEcABEsSIoZUQyCbIUshGyEiWyECKyAbMyCnMARCQJsTIJsgeyCCOyECKyAbOJ","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the AssetMarket contract
 */
export type AssetMarketArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(uint64)void': {
      unitPrice: bigint | number
    }
    'createAsset(pay)uint64': {
      mbrTxn: AppMethodCallTransactionArgument
    }
    'updatePrice(uint64)void': {
      newPrice: bigint | number
    }
    'purchaseAsset(pay,uint64)void': {
      paymentTxn: AppMethodCallTransactionArgument
      numberOfUnits: bigint | number
    }
    'deleteApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(uint64)void': [unitPrice: bigint | number]
    'createAsset(pay)uint64': [mbrTxn: AppMethodCallTransactionArgument]
    'updatePrice(uint64)void': [newPrice: bigint | number]
    'purchaseAsset(pay,uint64)void': [paymentTxn: AppMethodCallTransactionArgument, numberOfUnits: bigint | number]
    'deleteApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type AssetMarketReturns = {
  'createApplication(uint64)void': void
  'createAsset(pay)uint64': bigint
  'updatePrice(uint64)void': void
  'purchaseAsset(pay,uint64)void': void
  'deleteApplication()void': void
}

/**
 * Defines the types of available calls and state of the AssetMarket smart contract.
 */
export type AssetMarketTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint64)void' | 'createApplication', {
      argsObj: AssetMarketArgs['obj']['createApplication(uint64)void']
      argsTuple: AssetMarketArgs['tuple']['createApplication(uint64)void']
      returns: AssetMarketReturns['createApplication(uint64)void']
    }>
    & Record<'createAsset(pay)uint64' | 'createAsset', {
      argsObj: AssetMarketArgs['obj']['createAsset(pay)uint64']
      argsTuple: AssetMarketArgs['tuple']['createAsset(pay)uint64']
      returns: AssetMarketReturns['createAsset(pay)uint64']
    }>
    & Record<'updatePrice(uint64)void' | 'updatePrice', {
      argsObj: AssetMarketArgs['obj']['updatePrice(uint64)void']
      argsTuple: AssetMarketArgs['tuple']['updatePrice(uint64)void']
      returns: AssetMarketReturns['updatePrice(uint64)void']
    }>
    & Record<'purchaseAsset(pay,uint64)void' | 'purchaseAsset', {
      argsObj: AssetMarketArgs['obj']['purchaseAsset(pay,uint64)void']
      argsTuple: AssetMarketArgs['tuple']['purchaseAsset(pay,uint64)void']
      returns: AssetMarketReturns['purchaseAsset(pay,uint64)void']
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: AssetMarketArgs['obj']['deleteApplication()void']
      argsTuple: AssetMarketArgs['tuple']['deleteApplication()void']
      returns: AssetMarketReturns['deleteApplication()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        listingAssetId: bigint
        unitPrice: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AssetMarketSignatures = keyof AssetMarketTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AssetMarketNonVoidMethodSignatures = keyof AssetMarketTypes['methods'] extends infer T ? T extends keyof AssetMarketTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AssetMarket smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AssetMarketSignatures> = AssetMarketTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AssetMarket smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AssetMarketSignatures> = AssetMarketTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AssetMarketTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AssetMarketCreateCallParams =
  | Expand<CallParams<AssetMarketArgs['obj']['createApplication(uint64)void'] | AssetMarketArgs['tuple']['createApplication(uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<AssetMarketArgs['obj']['createApplication(uint64)void'] | AssetMarketArgs['tuple']['createApplication(uint64)void']> & {method: 'createApplication(uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported delete method params for this smart contract
 */
export type AssetMarketDeleteCallParams =
  | Expand<CallParams<AssetMarketArgs['obj']['deleteApplication()void'] | AssetMarketArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication'}>
  | Expand<CallParams<AssetMarketArgs['obj']['deleteApplication()void'] | AssetMarketArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type AssetMarketDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AssetMarketCreateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: AssetMarketDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AssetMarket smart contract
 */
export abstract class AssetMarketParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends AssetMarketCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(uint64)void':
            return AssetMarketParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the AssetMarket smart contract using the createApplication(uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<AssetMarketArgs['obj']['createApplication(uint64)void'] | AssetMarketArgs['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.unitPrice],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends AssetMarketDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'deleteApplication':
          case 'deleteApplication()void':
            return AssetMarketParamsFactory.delete.deleteApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the AssetMarket smart contract using the deleteApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteApplication(params: CallParams<AssetMarketArgs['obj']['deleteApplication()void'] | AssetMarketArgs['tuple']['deleteApplication()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'deleteApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createAsset(pay)uint64 ABI method
   *
   * Create Asset
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createAsset(params: CallParams<AssetMarketArgs['obj']['createAsset(pay)uint64'] | AssetMarketArgs['tuple']['createAsset(pay)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createAsset(pay)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrTxn],
    }
  }
  /**
   * Constructs a no op call for the updatePrice(uint64)void ABI method
   *
   * Update price - newPrice
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updatePrice(params: CallParams<AssetMarketArgs['obj']['updatePrice(uint64)void'] | AssetMarketArgs['tuple']['updatePrice(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updatePrice(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newPrice],
    }
  }
  /**
   * Constructs a no op call for the purchaseAsset(pay,uint64)void ABI method
   *
   * purchase asset - numberOfUnits
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static purchaseAsset(params: CallParams<AssetMarketArgs['obj']['purchaseAsset(pay,uint64)void'] | AssetMarketArgs['tuple']['purchaseAsset(pay,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'purchaseAsset(pay,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.paymentTxn, params.args.numberOfUnits],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AssetMarket smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AssetMarketFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AssetMarketFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AssetMarketClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AssetMarketClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AssetMarket smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AssetMarketDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? AssetMarketParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (AssetMarketCreateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? AssetMarketParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (AssetMarketDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new AssetMarketClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AssetMarket smart contract using the createApplication(uint64)void ABI method.
       *
       * Create Application method (set price while creating)
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<AssetMarketArgs['obj']['createApplication(uint64)void'] | AssetMarketArgs['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(AssetMarketParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the AssetMarket smart contract using the deleteApplication()void ABI method.
       *
       * Delete application method
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteApplication: (params: CallParams<AssetMarketArgs['obj']['deleteApplication()void'] | AssetMarketArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(AssetMarketParamsFactory.delete.deleteApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AssetMarket smart contract using the createApplication(uint64)void ABI method.
       *
       * Create Application method (set price while creating)
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<AssetMarketArgs['obj']['createApplication(uint64)void'] | AssetMarketArgs['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(AssetMarketParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AssetMarket smart contract using an ABI method call using the createApplication(uint64)void ABI method.
       *
       * Create Application method (set price while creating)
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<AssetMarketArgs['obj']['createApplication(uint64)void'] | AssetMarketArgs['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(AssetMarketParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | AssetMarketReturns['createApplication(uint64)void']) }, appClient: new AssetMarketClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AssetMarket smart contract
 */
export class AssetMarketClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AssetMarketClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AssetMarket app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AssetMarketClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AssetMarketNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AssetMarketClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AssetMarketClient> {
    return new AssetMarketClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AssetMarketClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AssetMarketClient> {
    return new AssetMarketClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the AssetMarket smart contract using the `deleteApplication()void` ABI method.
       *
       * Delete application method
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteApplication: (params: CallParams<AssetMarketArgs['obj']['deleteApplication()void'] | AssetMarketArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.params.delete(AssetMarketParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the AssetMarket smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AssetMarket smart contract using the `createAsset(pay)uint64` ABI method.
     *
     * Create Asset
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createAsset: (params: CallParams<AssetMarketArgs['obj']['createAsset(pay)uint64'] | AssetMarketArgs['tuple']['createAsset(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AssetMarketParamsFactory.createAsset(params))
    },

    /**
     * Makes a call to the AssetMarket smart contract using the `updatePrice(uint64)void` ABI method.
     *
     * Update price - newPrice
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updatePrice: (params: CallParams<AssetMarketArgs['obj']['updatePrice(uint64)void'] | AssetMarketArgs['tuple']['updatePrice(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AssetMarketParamsFactory.updatePrice(params))
    },

    /**
     * Makes a call to the AssetMarket smart contract using the `purchaseAsset(pay,uint64)void` ABI method.
     *
     * purchase asset - numberOfUnits
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    purchaseAsset: (params: CallParams<AssetMarketArgs['obj']['purchaseAsset(pay,uint64)void'] | AssetMarketArgs['tuple']['purchaseAsset(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AssetMarketParamsFactory.purchaseAsset(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the AssetMarket smart contract using the `deleteApplication()void` ABI method.
       *
       * Delete application method
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteApplication: (params: CallParams<AssetMarketArgs['obj']['deleteApplication()void'] | AssetMarketArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(AssetMarketParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the AssetMarket smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AssetMarket smart contract using the `createAsset(pay)uint64` ABI method.
     *
     * Create Asset
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createAsset: (params: CallParams<AssetMarketArgs['obj']['createAsset(pay)uint64'] | AssetMarketArgs['tuple']['createAsset(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AssetMarketParamsFactory.createAsset(params))
    },

    /**
     * Makes a call to the AssetMarket smart contract using the `updatePrice(uint64)void` ABI method.
     *
     * Update price - newPrice
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updatePrice: (params: CallParams<AssetMarketArgs['obj']['updatePrice(uint64)void'] | AssetMarketArgs['tuple']['updatePrice(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AssetMarketParamsFactory.updatePrice(params))
    },

    /**
     * Makes a call to the AssetMarket smart contract using the `purchaseAsset(pay,uint64)void` ABI method.
     *
     * purchase asset - numberOfUnits
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    purchaseAsset: (params: CallParams<AssetMarketArgs['obj']['purchaseAsset(pay,uint64)void'] | AssetMarketArgs['tuple']['purchaseAsset(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AssetMarketParamsFactory.purchaseAsset(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the AssetMarket smart contract using the `deleteApplication()void` ABI method.
       *
       * Delete application method
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteApplication: async (params: CallParams<AssetMarketArgs['obj']['deleteApplication()void'] | AssetMarketArgs['tuple']['deleteApplication()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(AssetMarketParamsFactory.delete.deleteApplication(params))
        return {...result, return: result.return as unknown as (undefined | AssetMarketReturns['deleteApplication()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the AssetMarket smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AssetMarket smart contract using the `createAsset(pay)uint64` ABI method.
     *
     * Create Asset
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createAsset: async (params: CallParams<AssetMarketArgs['obj']['createAsset(pay)uint64'] | AssetMarketArgs['tuple']['createAsset(pay)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AssetMarketParamsFactory.createAsset(params))
      return {...result, return: result.return as unknown as (undefined | AssetMarketReturns['createAsset(pay)uint64'])}
    },

    /**
     * Makes a call to the AssetMarket smart contract using the `updatePrice(uint64)void` ABI method.
     *
     * Update price - newPrice
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updatePrice: async (params: CallParams<AssetMarketArgs['obj']['updatePrice(uint64)void'] | AssetMarketArgs['tuple']['updatePrice(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AssetMarketParamsFactory.updatePrice(params))
      return {...result, return: result.return as unknown as (undefined | AssetMarketReturns['updatePrice(uint64)void'])}
    },

    /**
     * Makes a call to the AssetMarket smart contract using the `purchaseAsset(pay,uint64)void` ABI method.
     *
     * purchase asset - numberOfUnits
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    purchaseAsset: async (params: CallParams<AssetMarketArgs['obj']['purchaseAsset(pay,uint64)void'] | AssetMarketArgs['tuple']['purchaseAsset(pay,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AssetMarketParamsFactory.purchaseAsset(params))
      return {...result, return: result.return as unknown as (undefined | AssetMarketReturns['purchaseAsset(pay,uint64)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AssetMarketClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current AssetMarket app
   */
  state = {
    /**
     * Methods to access global state for the current AssetMarket app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          listingAssetId: result.listingAssetId,
          unitPrice: result.unitPrice,
        }
      },
      /**
       * Get the current value of the listingAssetId key in global state
       */
      listingAssetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("listingAssetId")) as bigint | undefined },
      /**
       * Get the current value of the unitPrice key in global state
       */
      unitPrice: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("unitPrice")) as bigint | undefined },
    },
  }

  public newGroup(): AssetMarketComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createAsset(pay)uint64 method call against the AssetMarket contract
       */
      createAsset(params: CallParams<AssetMarketArgs['obj']['createAsset(pay)uint64'] | AssetMarketArgs['tuple']['createAsset(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createAsset(params)))
        resultMappers.push((v) => client.decodeReturnValue('createAsset(pay)uint64', v))
        return this
      },
      /**
       * Add a updatePrice(uint64)void method call against the AssetMarket contract
       */
      updatePrice(params: CallParams<AssetMarketArgs['obj']['updatePrice(uint64)void'] | AssetMarketArgs['tuple']['updatePrice(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updatePrice(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a purchaseAsset(pay,uint64)void method call against the AssetMarket contract
       */
      purchaseAsset(params: CallParams<AssetMarketArgs['obj']['purchaseAsset(pay,uint64)void'] | AssetMarketArgs['tuple']['purchaseAsset(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.purchaseAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        return {
          deleteApplication: (params: CallParams<AssetMarketArgs['obj']['deleteApplication()void'] | AssetMarketArgs['tuple']['deleteApplication()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.deleteApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the AssetMarket contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AssetMarketComposer
  }
}
export type AssetMarketComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createAsset(pay)uint64 ABI method.
   *
   * Create Asset
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createAsset(params?: CallParams<AssetMarketArgs['obj']['createAsset(pay)uint64'] | AssetMarketArgs['tuple']['createAsset(pay)uint64']>): AssetMarketComposer<[...TReturns, AssetMarketReturns['createAsset(pay)uint64'] | undefined]>

  /**
   * Calls the updatePrice(uint64)void ABI method.
   *
   * Update price - newPrice
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updatePrice(params?: CallParams<AssetMarketArgs['obj']['updatePrice(uint64)void'] | AssetMarketArgs['tuple']['updatePrice(uint64)void']>): AssetMarketComposer<[...TReturns, AssetMarketReturns['updatePrice(uint64)void'] | undefined]>

  /**
   * Calls the purchaseAsset(pay,uint64)void ABI method.
   *
   * purchase asset - numberOfUnits
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  purchaseAsset(params?: CallParams<AssetMarketArgs['obj']['purchaseAsset(pay,uint64)void'] | AssetMarketArgs['tuple']['purchaseAsset(pay,uint64)void']>): AssetMarketComposer<[...TReturns, AssetMarketReturns['purchaseAsset(pay,uint64)void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the AssetMarket smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(params?: CallParams<AssetMarketArgs['obj']['deleteApplication()void'] | AssetMarketArgs['tuple']['deleteApplication()void']>): AssetMarketComposer<[...TReturns, AssetMarketReturns['deleteApplication()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the AssetMarket smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AssetMarketComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AssetMarketComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AssetMarketComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AssetMarketComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AssetMarketComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AssetMarketComposerResults<TReturns>>
}
export type AssetMarketComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

