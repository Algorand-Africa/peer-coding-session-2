{
    "hints": {
        "createApplication(uint64)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "createAsset(pay)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updatePrice(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "purchaseAsset(pay,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deleteApplication()void": {
            "call_config": {
                "delete_application": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 2
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "listingAssetId": {
                    "type": "uint64",
                    "key": "listingAssetId"
                },
                "unitPrice": {
                    "type": "uint64",
                    "key": "unitPrice"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "AssetMarket",
        "methods": [
            {
                "name": "createApplication",
                "args": [
                    {
                        "type": "uint64",
                        "name": "unitPrice"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Create Application method (set price while creating)"
            },
            {
                "name": "createAsset",
                "args": [
                    {
                        "type": "pay",
                        "name": "mbrTxn"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Create Asset"
            },
            {
                "name": "updatePrice",
                "args": [
                    {
                        "type": "uint64",
                        "name": "newPrice"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Update price - newPrice"
            },
            {
                "name": "purchaseAsset",
                "args": [
                    {
                        "type": "pay",
                        "name": "paymentTxn"
                    },
                    {
                        "type": "uint64",
                        "name": "numberOfUnits"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "purchase asset - numberOfUnits"
            },
            {
                "name": "deleteApplication",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Delete application method"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}